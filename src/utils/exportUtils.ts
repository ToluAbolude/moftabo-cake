
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';

interface OrderData {
  id: string;
  created_at: string;
  status: string | null;
  total_amount: number;
  user_id: string | null;
  items: any;
}

interface StatsSummary {
  totalSales: number;
  totalVisits: number;
  totalQuestions: number;
  salesGrowth: number;
  visitsGrowth: number;
  questionsGrowth: number;
}

interface DashboardData {
  date: string;
  sales: number;
  visits: number;
}

export const exportToCSV = (
  orders: OrderData[], 
  stats: StatsSummary, 
  chartData: DashboardData[]
) => {
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });
  };

  // Create CSV content
  let csvContent = '';
  
  // Summary Stats Section
  csvContent += 'DASHBOARD SUMMARY\n';
  csvContent += 'Metric,Value,Growth Rate\n';
  csvContent += `Total Sales,$${stats.totalSales.toLocaleString()},${stats.salesGrowth.toFixed(2)}%\n`;
  csvContent += `Total Visits,${stats.totalVisits.toLocaleString()},${stats.visitsGrowth.toFixed(2)}%\n`;
  csvContent += `Total Questions,${stats.totalQuestions},${stats.questionsGrowth.toFixed(2)}%\n`;
  csvContent += '\n';

  // Monthly Data Section
  csvContent += 'MONTHLY DATA\n';
  csvContent += 'Month,Sales,Visits\n';
  chartData.forEach(data => {
    csvContent += `${data.date},$${data.sales},${data.visits}\n`;
  });
  csvContent += '\n';

  // Orders Section
  csvContent += 'ORDERS DETAILS\n';
  csvContent += 'Order ID,Date,Customer,Amount,Status,Items\n';
  orders.forEach(order => {
    const orderItems = Array.isArray(order.items) 
      ? order.items.map((item: any) => `${item.name || 'Item'} (${item.quantity || 1}x)`).join('; ')
      : 'No items data';
    
    csvContent += `${order.id.substring(0, 8)}...,${formatDate(order.created_at)},${order.user_id ? order.user_id.substring(0, 8) + '...' : 'Guest'},$${order.total_amount},${order.status || 'pending'},"${orderItems}"\n`;
  });

  // Create and download CSV file
  const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
  const link = document.createElement('a');
  const url = URL.createObjectURL(blob);
  link.setAttribute('href', url);
  link.setAttribute('download', `moftabo_dashboard_export_${new Date().toISOString().split('T')[0]}.csv`);
  link.style.visibility = 'hidden';
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
};

export const exportToPDF = (
  orders: OrderData[], 
  stats: StatsSummary, 
  chartData: DashboardData[]
) => {
  const doc = new jsPDF();
  
  // Title
  doc.setFontSize(20);
  doc.text('Moftabo Bakery - Dashboard Report', 20, 20);
  
  doc.setFontSize(12);
  doc.text(`Generated on: ${new Date().toLocaleDateString()}`, 20, 35);
  doc.text(`Generated by: admin@moftabo.com`, 20, 45);

  let yPosition = 60;

  // Summary Stats Table
  doc.setFontSize(16);
  doc.text('Dashboard Summary', 20, yPosition);
  yPosition += 10;

  const statsData = [
    ['Total Sales', `$${stats.totalSales.toLocaleString()}`, `${stats.salesGrowth.toFixed(2)}%`],
    ['Total Visits', stats.totalVisits.toLocaleString(), `${stats.visitsGrowth.toFixed(2)}%`],
    ['Total Questions', stats.totalQuestions.toString(), `${stats.questionsGrowth.toFixed(2)}%`]
  ];

  autoTable(doc, {
    startY: yPosition,
    head: [['Metric', 'Value', 'Growth Rate']],
    body: statsData,
    theme: 'grid',
    headStyles: { fillColor: [66, 139, 202] },
    margin: { left: 20, right: 20 }
  });

  yPosition = (doc as any).lastAutoTable.finalY + 20;

  // Monthly Data Table
  doc.setFontSize(16);
  doc.text('Monthly Performance', 20, yPosition);
  yPosition += 10;

  const monthlyData = chartData.map(data => [
    data.date,
    `$${data.sales.toLocaleString()}`,
    data.visits.toLocaleString()
  ]);

  autoTable(doc, {
    startY: yPosition,
    head: [['Month', 'Sales', 'Visits']],
    body: monthlyData,
    theme: 'grid',
    headStyles: { fillColor: [66, 139, 202] },
    margin: { left: 20, right: 20 }
  });

  yPosition = (doc as any).lastAutoTable.finalY + 20;

  // Orders Table
  if (yPosition > 250) {
    doc.addPage();
    yPosition = 20;
  }

  doc.setFontSize(16);
  doc.text('Recent Orders', 20, yPosition);
  yPosition += 10;

  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  };

  const ordersData = orders.map(order => {
    const orderItems = Array.isArray(order.items) 
      ? order.items.map((item: any) => item.name || 'Item').join(', ')
      : 'No items';
    
    return [
      order.id.substring(0, 8) + '...',
      formatDate(order.created_at),
      order.user_id ? order.user_id.substring(0, 8) + '...' : 'Guest',
      `$${order.total_amount}`,
      order.status || 'pending',
      orderItems.length > 30 ? orderItems.substring(0, 30) + '...' : orderItems
    ];
  });

  autoTable(doc, {
    startY: yPosition,
    head: [['Order ID', 'Date', 'Customer', 'Amount', 'Status', 'Items']],
    body: ordersData,
    theme: 'grid',
    headStyles: { fillColor: [66, 139, 202] },
    margin: { left: 20, right: 20 },
    columnStyles: {
      0: { cellWidth: 25 },
      1: { cellWidth: 25 },
      2: { cellWidth: 25 },
      3: { cellWidth: 20 },
      4: { cellWidth: 25 },
      5: { cellWidth: 40 }
    }
  });

  // Save the PDF
  doc.save(`moftabo_dashboard_report_${new Date().toISOString().split('T')[0]}.pdf`);
};
